<% include ../fragments/header.ejs %>

<% if (grants == 0) { %>
	<div class="alert alert-danger alert-dismissible fade show" role="alert">
		<strong>Warning!</strong> You still need to link your Amazon Account via the Alexa App! See <a href='https://github.com/coldfire84/node-red-alexa-home-skill-v3-web/wiki/Use-the-Hosted-Instance'>here</a> for more information.
		<button type="button" class="close" data-dismiss="alert" aria-label="Close">
		<span aria-hidden="true">&times;</span>
		</button>
	</div>
<% } %>

<div class="container main-content">
	<h1>Devices for User: <%= user.username %></h1>
	<h3>Total Count: <%= count %></h3>
	<table class="table table-striped">
		<thead>
			<tr>
				<th scope="col">Name</th>
				<th scope="col">Description</th>
				<th scope="col">Capabilities</th>
				<th scope="col">Manage</th>
			</tr>
		</thead>
		<tbody>
			<% devices.forEach(function(device){ %>
				<tr>
					<th scope="row"><%= device.friendlyName %></th>
					<td><%= device.description %></td>
					<td>
						<% device.capabilities.forEach(function(action){ %>
							<img class="action" src="/images/<%= action %>.png" title="<%= action %>">
						<% }); %>
					</td>
					<td>
						<button type="button" class="btn btn-secondary" onclick="edit('<%= device._id %>')">Edit</button>
						<button type="button" class="btn btn-secondary" onclick="deleteDevice('<%= device._id%>')">Delete</button>
					</td>
				</tr>
			<% }); %>
		</tbody>
	</table>
	<div style="padding-top: 10px;">
		<button type="button" class="btn btn-secondary" onclick="addDevice();">Add Device</button>
	</div>
	<br />
	<p>After making any changes remember to ask Alexa to update devices it knows about by saying "Alexa, discover devices"</p>
</div>

<% include ../fragments/device-modal.ejs %>

<script>

$(document).ready(function () {
	$('[data-toggle="tooltip"]').tooltip();
});
		
$("#form-device").submit(function(e) {
	e.preventDefault();
	saveDevice()
});

///////////////////////////////////////////////////////////////////////////
// Interface/ Capability-specific validation/ element show and hide
///////////////////////////////////////////////////////////////////////////
//Enable/ disable minimumValue/ maximumValue and scale elements
$("#ThermostatController").change(function(e) {
	if ( $(this).is(':checked') == false) {
		$('#validRangeOptions').hide();
		$('#validRangeScaleOptions').hide();
		$('#thermostatModeOptions').hide();
		$('#maximumValue').attr("disabled", "disabled"); 
		$('#minimumValue').attr("disabled", "disabled");
		$('#Celsius').attr("disabled", "disabled"); 
		$('#Farenheit').attr("disabled", "disabled");
		$("#maximumValue").prop('required',false);
		$("#minimumValue").prop('required',false);
		$("#Celsius").prop('required',false);
		$("#Farenheit").prop('required',false);
		$('#HEAT').prop('checked', false);
		$('#COOL').prop('checked', false);
		$('#AUTO').prop('checked', false);
		$('#ON').prop('checked', false);
		$('#OFF').prop('checked', false);
	}
	else {
		$('#ReportState').prop('checked', true);
		$('#stateReporting').show(); 
		$('#validRangeOptions').show();
		$('#validRangeScaleOptions').show();
		$('#thermostatModeOptions').show();
		$('#maximumValue').removeAttr("disabled"); 
		$('#minimumValue').removeAttr("disabled");
		$('#Celsius').removeAttr("disabled");
		$('#Farenheit').removeAttr("disabled");
		$("#maximumValue").prop('required',true);
		$("#minimumValue").prop('required',true);
		$("#Celsius").prop('required',true);
		$("#Farenheit").prop('required',true);
		$('#AUTO').prop('checked', true);
		// Prevent ColorTemperature and Thermostat interfaces co-exist
		$("#ColorTemperatureController").prop('checked', false);
	}
});
//Enable Celsius and Farenheit options for Temperature Sesnor
$("#TemperatureSensor").change(function(e) {
	if ( $(this).is(':checked') == false) {
		if ($('#THERMOSTAT').prop('checked') == false){$('#validRangeScaleOptions').hide()};
		$("#Celsius").prop('required',false);
		$("#Farenheit").prop('required',false);
		$('#Celsius').attr("disabled", "disabled"); 
		$('#Farenheit').attr("disabled", "disabled");
		if ($('#THERMOSTAT').prop('checked')){$('#TEMPERATURE_SENSOR').prop('checked', false)};
	}
	else {
		$('#ReportState').prop('checked', true);
		$('#stateReporting').show(); 
		$('#validRangeScaleOptions').show();
		$('#Celsius').removeAttr("disabled");
		$('#Farenheit').removeAttr("disabled");
		$("#Celsius").prop('required',true);
		$("#Farenheit").prop('required',true);
		if ($('#THERMOSTAT').prop('checked')){$('#TEMPERATURE_SENSOR').prop('checked', true)};
	}
});
//Enable/ disable minimumValue/ maximumValue elements
$("#ColorTemperatureController").change(function(e) {
	if ($(this).is(':checked') == false) {
		$('#validRangeOptions').hide();
		$('#maximumValue').attr("disabled", "disabled"); 
		$('#minimumValue').attr("disabled", "disabled");
		$("#maximumValue").prop('required',false);
		$("#minimumValue").prop('required',false);
	}
	else {
		$('#ReportState').prop('checked', true);
		$('#stateReporting').show(); 
		$('#validRangeOptions').show();
		$('#maximumValue').removeAttr("disabled"); 
		$('#minimumValue').removeAttr("disabled");
		$("#maximumValue").prop('required',true);
		$("#minimumValue").prop('required',true);
		// Prevent ColorTemperature and Thermostat interfaces co-exist
		$("#ThermostatController").prop('checked', false);
	}
});
// Prevent Step Speaker and Speaker being enabled at the same time
$("#Speaker").change(function(e) {
	$('#ReportState').prop('checked', true);
	$('#stateReporting').show(); 
	if ( $(this).is(':checked') == true ) {
		$('#StepSpeaker').prop('checked', false)
	}
});
$("#StepSpeaker").change(function(e) {
	$('#ReportState').prop('checked', false);
	if ( $(this).is(':checked') == true ) {
		$('#Speaker').prop('checked', false)
	}
});
// Prevent Lock Controller co-exist
$("#LockController").change(function(e) {
	if ($(this).is(':checked')) {
		$('#ReportState').prop('checked', true);
		$('#stateReporting').show(); 
		$("#LockController").prop('checked',true);
		// Disable other capabilities
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "LockController"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				$('input[id^='+$(this).attr("id")+']').prop("checked", true);
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	else {
		$('#ReportState').prop('checked', false);
		// Enable other capabilities
		$('input[name=capabilities]').each(function(index){
			$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
		});	
	}
});
// Prevent Scene Controller co-exist
$("#SceneController").change(function(e) {
	if ($(this).is(':checked')) {
		$('#ReportState').prop('checked', false);
		// Disable other capabilities
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "SceneController"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				$('input[id^='+$(this).attr("id")+']').prop("checked", true);
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	else {
		// Enable other capabilities
		$('input[name=capabilities]').each(function(index){
			$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
		});	
	}
});
// Ensure Thermostat Mode co-exist
$("#HEAT").change(function(e) {
	if ($(this).is(':checked')) {
		$("#COOL").prop("checked", true);
	}
	else {
		$("#COOL").prop("checked", false);
	}
});
$("#COOL").change(function(e) {
	if ($(this).is(':checked')) {
		$("#HEAT").prop("checked", true);
	}
	else {
		$("#HEAT").prop("checked", false);
	}
});
$("#ON").change(function(e) {
	if ($(this).is(':checked')) {
		$("#OFF").prop("checked", true);
	}
	else {
		$("#OFF").prop("checked", false);
	}
});
$("#OFF").change(function(e) {
	if ($(this).is(':checked')) {
		$("#ON").prop("checked", true);
	}
	else {
		$("#ON").prop("checked", false);
	}
});

///////////////////////////////////////////////////////////////////////////
// Device type-specific validation/ element show and hide
///////////////////////////////////////////////////////////////////////////
function checkType(type) {
	// Clean-up modal elemts in-case they are no longer needed
	$('#thermostatModeOptions').hide();
	$('#validRangeOptions').hide();
	$('#validRangeScaleOptions').hide();
	$('#stateReporting').hide(); 
	$('#Celsius').attr("disabled", "disabled"); 
	$('#Farenheit').attr("disabled", "disabled");
	$("#maximumValue").prop('required',false);
	$("#minimumValue").prop('required',false);
	$("#Celsius").prop('required',false);
	$("#Farenheit").prop('required',false);
	//if ($('#ACTIVITY_TRIGGER').prop('checked') && !$('#OTHER').prop('checked')) {
	if (type.id== "ACTIVITY_TRIGGER" && type.checked && !$('#OTHER').prop('checked')) {
		$('#simpleOptions').show();
		$("#SceneController").prop('checked',true);
		$('#ReportState').prop('checked', false);
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "ACTIVITY_TRIGGER") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "SceneController"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				$('input[id^='+$(this).attr("id")+']').prop("checked", true);
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	//else if ($('#HVAC').prop('checked') && !$('#OTHER').prop('checked')) { // Flash ToolTip ref TempSensor
	else if (type.id== "HVAC" && type.checked && !$('#OTHER').prop('checked')) { // Flash ToolTip ref TempSensor
		$('#simpleOptions').show();
		// Trigger ThermostatController onchange
		$("#ThermostatController").prop('checked',true);
		$("#ThermostatController").change();
		if ($('#TEMPERATURE_SENSOR').prop('checked')) {$("#TemperatureSensor").prop('checked',true)}
		else {$("#TemperatureSensor").prop('checked',false)}	
		$('input[name=appType]').each(function(index){
			if ($(this).attr("id") != "TEMPERATURE_SENSOR" && $(this).attr("id") != "HVAC") {
				$('input[id^='+$(this).attr("id")+']').prop("checked", false)
			}
		});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "TemperatureSensor"  && $(this).attr("id") != "ThermostatController" && $(this).attr("id") != "PercentageController"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				$('input[id^='+$(this).attr("id")+']').prop("checked", true);
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	//else if ($('#LIGHT').prop('checked') && !$('#OTHER').prop('checked')) {
	else if (type.id== "LIGHT" && type.checked &&  !$('#OTHER').prop('checked')) {
		$('#simpleOptions').show();
		$('#ReportState').prop('checked', true);
		$('#stateReporting').show(); 
		$("#PowerController").prop('checked',true);
		//$('#validRangeOptions').show();
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "LIGHT") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "PowerController" && $(this).attr("id") != "BrightnessController" && $(this).attr("id") != "ColorController" && $(this).attr("id") != "ColorTemperatureController"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				if ($(this).attr("id") == "PowerController"){$('input[id^='+$(this).attr("id")+']').prop("checked", true)}
				else {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	//else if ($('#SMARTLOCK').prop('checked') && !$('#OTHER').prop('checked')) {
	else if (type.id== "SMARTLOCK" && type.checked && !$('#OTHER').prop('checked')) {
		$('#simpleOptions').show();
		$('#ReportState').prop('checked', true);
		$('#stateReporting').show(); 
		$("#LockController").prop('checked',true);
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "SMARTLOCK") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "LockController"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				$('input[id^='+$(this).attr("id")+']').prop("checked", true);
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	//else if ($('#SMARTPLUG').prop('checked') && !$('#OTHER').prop('checked')) {
	else if (type.id== "SMARTPLUG" && type.checked &&  !$('#OTHER').prop('checked')) {
		$('#simpleOptions').show();
		$('#ReportState').prop('checked', true);
		$('#stateReporting').show(); 
		$("#PowerController").prop('checked',true);
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "SMARTPLUG") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "PowerController"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				$('input[id^='+$(this).attr("id")+']').prop("checked", true);
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	//else if ($('#SWITCH').prop('checked') && !$('#OTHER').prop('checked')) {
	else if (type.id== "SWITCH" && type.checked &&  !$('#OTHER').prop('checked')) {
		$('#simpleOptions').show();
		$('#ReportState').prop('checked', true);
		$('#stateReporting').show(); 
		$("#PowerController").prop('checked',true);
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "SWITCH") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "PowerController"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				$('input[id^='+$(this).attr("id")+']').prop("checked", true);
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	//else if ($('#SPEAKER').prop('checked') && !$('#OTHER').prop('checked')) {
	else if (type.id== "SPEAKER" && type.checked &&  !$('#OTHER').prop('checked')) {
		$('#simpleOptions').show();
		$("#SpeakerController").prop('checked',true);
		$('#ReportState').prop('checked', false);
		$('#stateReporting').show(); 
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "SPEAKER") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "Speaker" && $(this).attr("id") != "StepSpeaker"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				//$('input[id^='+$(this).attr("id")+']').prop("checked", true);
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	//else if ($('#TEMPERATURE_SENSOR').prop('checked') && !$('#THERMOSTAT').prop('checked') && !$('#OTHER').prop('checked')) {
	else if (type.id== "TEMPERATURE_SENSOR" && type.checked && !$('#THERMOSTAT').prop('checked') && !$('#OTHER').prop('checked')) {
		$('#simpleOptions').show();
		$("#TemperatureSensor").prop('checked',true);
		$("#TemperatureSensor").change();
		$('input[name=appType]').each(function(index){if ($(this).attr("id") != "TEMPERATURE_SENSOR") {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "TemperatureSensor"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				$('input[id^='+$(this).attr("id")+']').prop("checked", true);
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	//else if ($('#THERMOSTAT').prop('checked') && !$('#OTHER').prop('checked')) { // Flash ToolTip ref TempSensor
	else if (type.id== "THERMOSTAT" && type.checked && !$('#OTHER').prop('checked')) {
		$('#simpleOptions').show();
		// Trigger ThermostatController onchange
		$("#ThermostatController").prop('checked',true);
		$("#ThermostatController").change();
		if ($('#TEMPERATURE_SENSOR').prop('checked')) {$("#TemperatureSensor").prop('checked',true)}
		else {$("#TemperatureSensor").prop('checked',false)}
		$('input[name=appType]').each(function(index){
			if ($(this).attr("id") != "TEMPERATURE_SENSOR" && $(this).attr("id") != "THERMOSTAT") {
				$('input[id^='+$(this).attr("id")+']').prop("checked", false)
			}
		});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "TemperatureSensor"  && $(this).attr("id") != "ThermostatController"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				if ($(this).attr("id") == "ThermostatController"){$('input[id^='+$(this).attr("id")+']').prop("checked", true)}
				//else {$('input[id^='+$(this).attr("id")+']').prop("checked", false)}
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	//else if ($('#TV').prop('checked') && !$('#OTHER').prop('checked')) {
	else if (type.id== "TV" && type.checked && !$('#OTHER').prop('checked')) {
		$('#simpleOptions').show();
		$('#ReportState').prop('checked', false);
		$('#stateReporting').show(); 
		$("#PlaybackController").prop('checked',true);
		$('input[name=appType]').each(function(index){
			if ($(this).attr("id") != "TV") {
				$('input[id^='+$(this).attr("id")+']').prop("checked", false)
			}
		});
		$('input[name=capabilities]').each(function(index){
			if ($(this).attr("id") != "PlaybackController" && $(this).attr("id") != "ChannelController" && $(this).attr("id") != "InputController" && $(this).attr("id") != "PowerController" && $(this).attr("id") != "Speaker" && $(this).attr("id") != "StepSpeaker"){
				$('input[id^='+$(this).attr("id")+']').prop("checked", false);
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
			else {
				if ($(this).attr("id") == "PlaybackController"){$('input[id^='+$(this).attr("id")+']').prop("checked", true)}
				else {$('input[id^='+$(this).attr("id")+']').prop("checked", false)};
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
			}
		});
	}
	//else if ($('#OTHER').prop('checked')) {
	else if (type.id== "OTHER" && type.checked) {
		$('#simpleOptions').show();
		$('#ReportState').prop('checked', false);
		$('#stateReporting').show(); 
		$('input[name=appType]').each(function(index){
			if ($(this).attr("id") != "OTHER") {
				$('input[id^='+$(this).attr("id")+']').prop("checked", false)
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
		});
		$('input[name=capabilities]').each(function(index){
			$('input[id^='+$(this).attr("id")+']').prop("checked", false);
			$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
		});
	}
	else {
		$('#simpleOptions').hide();
		$('input[name=appType]').each(function(index){
				$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
		});
	}
}

function saveDevice() {
	var devID = $('#devID').val();
	// Add New Device
	if ( devID === "") {
		var device = {
			attributes: {},
			capabilities: [],
			displayCategories: [],
		};
		device.friendlyName = $('#friendlyName').val();
		device.description = $('#description').val();
		// Google Home Room Hint
		if ($('#roomHint').val() != "Optional") {
			device.attributes.roomHint = $('#roomHint').val();
		}
		///////////////////////////////////////////////////////////////////////////
		// Interface/ capability-specific device data-generation
		///////////////////////////////////////////////////////////////////////////
		// Get user-defined temperature scale
		if ($('#ThermostatController').prop('checked') || $('#TemperatureSensor').prop('checked') || $('#ColorTemperatureController').prop('checked')) {
			var scale;
			$('input[name=radioScale]').each(function(index){
				if (this.checked) {
					scale = this.value;
				}
			});
		}
		if ($('#ThermostatController').prop('checked')) {
			device.attributes.temperatureRange = {
				temperatureMin: $('#minimumValue').val(),
				temperatureMax: $('#maximumValue').val(),
			}
			device.attributes.temperatureScale = scale;
			device.attributes.thermostatModes = [];
			$('input[name=thermostatModes]').each(function(index){
				if (this.checked) {
					device.attributes.thermostatModes.push(this.value);
				}
			});
		}
		if ( $('#TemperatureSensor').prop('checked')) {
			device.attributes.temperatureScale = scale;
		}
		if ($('#ColorController').prop('checked')) {
			device.attributes.commandOnlyColorSetting = false;
		}
		if ($('#ColorTemperatureController').prop('checked')) {	
			device.attributes.colorTemperatureRange = {
				temperatureMinK: $('#minimumValue').val(),
				temperatureMaxK: $('#maximumValue').val()
			}
			device.attributes.commandOnlyColorSetting = false;
		}	
		if ($('#SceneController').prop('checked')) {
			device.attributes.sceneReversible = false;
		}
		$('input[name=capabilities]').each(function(index){
			if (this.checked) {
				device.capabilities.push(this.value);
			}
		});
		$('input[name=appType]').each(function(index){
			if (this.checked) {
				device.displayCategories.push(this.value);
			}
		});
		if ($('#ReportState').prop('checked')) {
			device.reportState = true;
		}
		else {device.reportState = false}
		// Generate/ save dummy state data for new device
		// This will significantly reduce getstate API traffic and make usability far easier
		device.state = generateState(null);
		if (device.friendlyName && device.description && device.capabilities.length > 0) {
			$.ajax({
				url:"/devices",
				type: 'PUT',
				data: JSON.stringify(device),
				dataType: 'json',
				contentType: "application/json",
				success: function(data){
					//console.log(data);
					//reload
					document.location.reload();
				}
			}).fail(function(){
				alert("failed to create device");
			});
		} else {
			alert("Name or desciption can not be empty and at least one action is needed");
		}
	} else {
		// Modify Existing Device
		var device = devices[devID];
		device.attributes = {};
		device.description = $('#description').val();
		// Google Home Room Hint
		if ($('#roomHint').val() != "Optional") {
			device.attributes.roomHint = $('#roomHint').val();
		}
		///////////////////////////////////////////////////////////////////////////
		// Interface/ capability-specific device data-generation
		///////////////////////////////////////////////////////////////////////////
		if ($('#ThermostatController').prop('checked') || $('#TemperatureSensor').prop('checked')) {
			var scale;
			$('input[name=radioScale]').each(function(index){
				if (this.checked) {
					scale = this.value;
				}
			});
		}
		if ($('#ThermostatController').prop('checked')) {
			device.attributes.temperatureRange = {
				temperatureMin: $('#minimumValue').val(),
				temperatureMax: $('#maximumValue').val(),
			}
			device.attributes.temperatureScale = scale;
			device.attributes.thermostatModes = [];
			$('input[name=thermostatModes]').each(function(index){
				if (this.checked) {
					device.attributes.thermostatModes.push(this.value);
				}
			});
		}
		if ( $('#TemperatureSensor').prop('checked')) {
			device.attributes.temperatureScale = scale;
		}
		if ($('#ColorController').prop('checked')) {
			device.attributes.commandOnlyColorSetting = false;
		}
		if ($('#ColorTemperatureController').prop('checked')) {		
			device.attributes.colorTemperatureRange = {
				temperatureMinK: $('#minimumValue').val(),
				temperatureMaxK: $('#maximumValue').val()
			}
			device.attributes.commandOnlyColorSetting = false;
		}
		if ($('#SceneController').prop('checked')) {
			device.attributes.sceneReversible = false;
		}
		device.capabilities = [];
		$('input[name=capabilities]').each(function(index){
			if (this.checked) {
				device.capabilities.push(this.value);
			}
		});
		device.displayCategories = [];
		$('input[name=appType]').each(function(index){
			if (this.checked) {
				device.displayCategories.push(this.value);
			}
		});
		if ($('#ReportState').prop('checked')) {
			device.reportState = true;
		}
		else {device.reportState = false}
		// validate state data, create dummy state data in the event user added new capabilities
		device.state = generateState(device.state);
		if (device.friendlyName && device.description && device.capabilities.length > 0) {
			//post update
			$.ajax({
				url: '/device/' + device._id,
				type: 'POST',
				data: JSON.stringify(device),
				dataType: 'json',
				contentType: "application/json",
				success: function(data){
					//console.log("post response");
					//console.log(data);
					//reload
					document.location.reload();
				},
			});
			// console.log(JSON.stringify(device));
		} else {
			alert("Name or desciption can not be empty and at least one action is needed");
		}
	}
}

function addDevice() {
	clearDevice();
	$("#newDeviceModal").modal();
}

function clearDevice() {
	// Hide modal elements
	$('#simpleOptions').hide(); 
	$('#advancedCapabilities').hide(); 
	$('#advancedOptions').hide(); 
	$('#stateReporting').hide(); 
	$('#validRangeOptions').hide();
	$('#validRangeScaleOptions').hide();
	$('#thermostatModeOptions').hide();
	// Set default values
	$('#devID').val("");
	$('#friendlyName').val("");
	$('#description').val("");
	$('#roomHint').val("");
	$('#maximumValue').val(""); 
	$('#minimumValue').val("");
	// Reset checkboxes
	$('input[name=appType]').each(function(index){
		$('input[id^='+$(this).attr("id")+']').prop("checked", false)
		$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
	});
	$('input[name=capabilities]').each(function(index){
		$('input[id^='+$(this).attr("id")+']').prop("checked", false);
		$('input[id^='+$(this).attr("id")+']').removeAttr("disabled"); 
	});
	$('input[name=radioScale]').each(function(index){
		$('input[id^='+$(this).attr("id")+']').prop("checked", false);
	});
	$('#ReportState').prop('checked', false)
	// Remove read-only property for new devices
	$('#friendlyName').prop('readonly', false);
	// Remove "required" property
	$('#maximumValue').attr("disabled", "disabled"); 
	$('#minimumValue').attr("disabled", "disabled");
	$('#Celsius').attr("disabled", "disabled"); 
	$('#Farenheit').attr("disabled", "disabled");
	// Remove "required" property
	$("#maximumValue").prop('required',false);
	$("#minimumValue").prop('required',false);
	$("#Celsius").prop('required',false);
	$("#Farenheit").prop('required',false);
}

function edit(id) {
	// Flush Modal
	clearDevice();
	// Show modal, with Interfaces/ Capability options
	$("#newDeviceModal").modal();
	$('#simpleOptions').show();
	// Load basic device data into modal
	var device = devices[id];
	$('#devID').val(device._id);
	$('#friendlyName').val(device.friendlyName);
	$('#friendlyName').prop('readonly', true);
	$('#description').val(device.description);
	// Disable all Interfaces/ Capabilities
	$('input[name=capabilities]').each(function(index){
		$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
	});
	// Pre-select and enable specific capabilities
	device.capabilities.forEach(function(action){
		$('#' + action).prop('checked',true);
		$('#' + action).removeAttr("disabled");
	});
	// Pre-select and enable specific device types
	device.displayCategories.forEach(function(type){
		$('#' + type).prop('checked',true);
	});
	///////////////////////////////////////////////////////////////////////////
	// Device type-specific enabling of interfaces/ capabilities
	///////////////////////////////////////////////////////////////////////////
	// Re-enable specific interfaces/ capabilities based on displayCategories
	if ($('#THERMOSTAT').prop('checked')){
		$('#ThermostatController').removeAttr("disabled");
		$('#TemperatureSensor').removeAttr("disabled");
	}
	else if ($('#HVAC').prop('checked')){
		$('#PercentageController').removeAttr("disabled");
		$('#ThermostatController').removeAttr("disabled");
		$('#TemperatureSensor').removeAttr("disabled");
	}
	else if ($('#LIGHT').prop('checked')){
		$('#BrightnessController').removeAttr("disabled");
		$('#ColorController').removeAttr("disabled");
		$('#ColorTemperatureController').removeAttr("disabled");
	}
	else if ($('#SPEAKER').prop('checked')){
		$('#Speaker').removeAttr("disabled");
		$('#StepSpeaker').removeAttr("disabled");
	}
	else if ($('#TV').prop('checked')){
		$('#PowerController').removeAttr("disabled");
		$('#InputController').removeAttr("disabled");
		$('#ChannelController').removeAttr("disabled");
		$('#Speaker').removeAttr("disabled");
		$('#StepSpeaker').removeAttr("disabled");
	}
	else if ($('#OTHER').prop('checked')) {
		// Re-enable *ALL* interfaces/ capabilities for selection
		$('input[name=capabilities]').each(function(index){
			$('input[id^='+$(this).attr("id")+']').removeAttr("disabled");
		});
		// Disable *ALL* other device types
		$('input[name=appType]').each(function(index){
			if ($(this).attr("id") != "OTHER") {
				$('input[id^='+$(this).attr("id")+']').prop("checked", false)
				$('input[id^='+$(this).attr("id")+']').attr("disabled", "disabled");
			}
		});
	}
	// Show State Reporting options unless Scene Controller
	if (device.capabilities.indexOf('SceneController') == -1) {
		$('#stateReporting').show(); 
	}
	// Capabilities with range/ scale for element un-hide/ population
	var colorTemperature = $('#ColorTemperatureController').prop('checked');
	var thermostat = $('#ThermostatController').prop('checked');
	var temperature = $('#TemperatureSensor').prop('checked');
	// ReportState Boolean
	if (device.hasOwnProperty('reportState')) {
		if (device.reportState == true) {$('#ReportState').prop('checked', true)};
		if (device.reportState == false) {$('#ReportState').prop('checked', false)};
	}
	// Load device attribtes into modal
	if (device.hasOwnProperty('attributes')){
		// Google Home Room Hint
		if (device.attributes.hasOwnProperty('roomHint')) {
			$("#roomHint").val(device.attributes.roomHint);
		}
		// Color Controller
		if (colorTemperature && device.attributes.hasOwnProperty('colorTemperatureRange')) {
			if (device.attributes.colorTemperatureRange.hasOwnProperty('temperatureMaxK')) {
				$('#validRangeOptions').show();
				$("#maximumValue").prop('required',true);
				$('#maximumValue').removeAttr("disabled"); 
				$("#maximumValue").val(device.attributes.colorTemperatureRange.temperatureMaxK);
			}
			if (device.attributes.colorTemperatureRange.hasOwnProperty('temperatureMinK')) {
				$('#validRangeOptions').show();
				$("#minimumValue").prop('required',true);
				$('#minimumValue').removeAttr("disabled"); 
				$("#minimumValue").val(device.attributes.colorTemperatureRange.temperatureMinK);
			}
		}
		// Thermostat or Temperature Sensor
		if (thermostat || temperature) {
			if (device.attributes.hasOwnProperty('temperatureScale')) {
				$('#validRangeScaleOptions').show();
				$('#Celsius').removeAttr("disabled");
				$('#Farenheit').removeAttr("disabled");
				$("#Celsius").prop('required',true);
				$("#Farenheit").prop('required',true);
				if (device.attributes.temperatureScale == 'CELSIUS') {$("#Celsius").prop('checked', true)}
				if (device.attributes.temperatureScale == 'FARENHEIT') {$("#Farenheit").prop('checked', true)}
			}
			// Handle user-selected thermostatModes
			if (device.attributes.hasOwnProperty('thermostatModes')) {
				$('#thermostatModeOptions').show();
				device.attributes.thermostatModes.forEach(function(mode){
					$('#' + mode).prop('checked',true);
				});
			}
			if (device.attributes.hasOwnProperty('temperatureRange')) {
				if (device.attributes.temperatureRange.hasOwnProperty('temperatureMax')) {
					$('#validRangeOptions').show();
					$("#maximumValue").prop('required',true);
					$('#maximumValue').removeAttr("disabled"); 
					$("#maximumValue").val(device.attributes.temperatureRange.temperatureMax);
				}
				if (device.attributes.temperatureRange.hasOwnProperty('temperatureMin')) {
					$('#validRangeOptions').show();
					$("#minimumValue").prop('required',true);
					$('#minimumValue').removeAttr("disabled"); 
					$("#minimumValue").val(device.attributes.temperatureRange.temperatureMin);
				}
			}
		}
	}
}

function deleteDevice(id) {
	var answer = confirm("Are you sure you want to delete this device?");
	if(answer) {
		$.ajax({
			url:"/device/" + id,
			type: 'DELETE',
			success: function(data){
				document.location.reload();
			}
		});
	}
}

///////////////////////////////////////////////////////////////////////////
// Interface/ capability-specific state-generation
///////////////////////////////////////////////////////////////////////////
function generateState(deviceState) {
	var dt = new Date().toISOString();
	var dummyState = {};
	dummyState.time = dt;
	//console.log("deviceState: " + JSON.stringify(deviceState));
	if (deviceState == null) { // new device, no existing state
		//console.log("No device state, generating dummy state");
		$('input[name=capabilities]:checked').each(function(index){
			switch ($(this).attr("id"))  {
				case "BrightnessController":
					dummyState.brightness = 75;
					break;
				case "ColorController": // set to green
					dummyState.colorHue = 120;
					dummyState.colorSaturation = 1;
					dummyState.brightness = 1;
					break;
				case "ColorTemperatureController": // set to warm white
					dummyState.colorTemperature = 2200;
					break;
				case "LockController":
					dummyState.lock = "UNLOCKED";
					break;
				case "PercentageController":
					dummyState.percentage = 100;
					break;
				case "PowerController":
					dummyState.power = "OFF";
					break;
				case "Speaker":
					dummyState.volume = 50;
					break;
				case "TemperatureSensor":
					dummyState.temperature = 22;
					break;
				case "ThermostatController":
					if ($("#Celsius").prop('checked') == true){dummyState.thermostatSetPoint = 22};
					if ($("#Farenheit").prop('checked') == true){dummyState.thermostatSetPoint = 74};
					dummyState.thermostatMode = "HEAT";
					break;
				}		
		});
	}
	else { // device has some state data already, ensure each capability has valid state data
		$('input[name=capabilities]:checked').each(function(index){
			//console.log("Existing device state, generating dummy state");
			switch ($(this).attr("id"))  {
				case "BrightnessController":
						if (deviceState.hasOwnProperty('brightness')) {
							if (typeof deviceState.brightness == 'number' && (deviceState.brightness >= 0 || deviceState.brightness <= 100)) {
								dummyState.brightness = deviceState.brightness;
							}
						}
						else {dummyState.brightness = 75}
						break;
				case "ColorController": // if no existing state set to green
					if (deviceState.hasOwnProperty('colorHue')) {
							if (typeof deviceState.colorHue == 'number' && (deviceState.colorHue >= 0 || deviceState.colorHue <= 360)) {
								dummyState.colorHue = deviceState.colorHue;
							}
					}
					else {dummyState.colorHue = 120}
					if (deviceState.hasOwnProperty('colorSaturation')) {
						if (typeof deviceState.colorSaturation == 'number' && (deviceState.colorSaturation >= 0 || deviceState.colorSaturation <= 1)) {
							dummyState.colorSaturation = deviceState.colorSaturation;
						}
					}
					else {dummyState.colorSaturation = 1}
					if (deviceState.hasOwnProperty('colorBrightness')) {
						if (typeof deviceState.colorBrightness == 'number' && (deviceState.colorBrightness >= 0 || deviceState.colorBrightness <= 1)) {
							dummyState.colorBrightness = deviceState.colorBrightness;
						}
					}
					else {dummyState.colorBrightness = 1}
					break;
				case "ColorTemperatureController": // if no existing state set to warm white
					if (deviceState.hasOwnProperty('colorTemperature')) {
						if (typeof deviceState.colorTemperature == 'number' && (deviceState.colorTemperature >= 1000 || deviceState.colorTemperature <= 10000)) {
							dummyState.colorTemperature = deviceState.colorTemperature;
						}
					}
					else {dummyState.colorTemperature = 2200}
					break;
				case "LockController":
					if (deviceState.hasOwnProperty('lock')) {
						if (typeof deviceState.lock == 'string' && (deviceState.lock == 'UNLOCKED' || deviceState.lock == 'LOCKED')) {
							dummyState.lock = deviceState.lock;
						}
					}
					else {dummyState.lock = "UNLOCKED"}
					break;
				case "PercentageController":
					if (deviceState.hasOwnProperty('percentage')) {
						if (typeof deviceState.percentage == 'number') {
							dummyState.percentage = deviceState.percentage;
						}
					}
					else {dummyState.percentage = 100}
					break;
				case "PowerController":
					if (deviceState.hasOwnProperty('power')) {
						if (typeof deviceState.power == 'string' && (deviceState.power == 'ON' || deviceState.power == 'OFF')) {
							dummyState.power = deviceState.power;
						}
					}
					else {dummyState.power = "OFF"}
					break;
				case "Speaker":
					if (deviceState.hasOwnProperty('volume')) {
						if (typeof deviceState.volume == 'number') {
							dummyState.volume = deviceState.volume;
						}
					}
					else {dummyState.volume = 50}
					break;
				case "TemperatureSensor":
					if (deviceState.hasOwnProperty('temperature')) {
						if (typeof deviceState.temperature == 'number') {
							dummyState.power = deviceState.temperature;
						}
					}
					else {dummyState.temperature = 22}
					break;
				case "ThermostatController":
					if (deviceState.hasOwnProperty('thermostatSetPoint')) {
						if (typeof deviceState.thermostatSetPoint == 'number') {
							dummyState.thermostatSetPoint = deviceState.thermostatSetPoint;
						}
					}
					else {
						if ($("#Celsius").prop('checked') == true){dummyState.thermostatSetPoint = 22}
						else if ($("#Farenheit").prop('checked') == true){dummyState.thermostatSetPoint = 74}
					}
					if (deviceState.hasOwnProperty('thermostatMode')) {
						if (typeof deviceState.thermostatMode == 'string') {
							dummyState.thermostatMode = deviceState.thermostatMode;
						}
					}
					else {dummyState.thermostatMode = "HEAT"}
					break;
				}
			}
		);
	}
	//console.log("Dummy state: " + JSON.stringify(dummyState));
	return dummyState;
}

var devices = {};
<%- JSON.stringify(devices) %>.forEach(function(device){
	devices[device._id] = device;
});
</script>
<% include ../fragments/footer.ejs %>